<h1 id='python'>Python</h1><h2 id='development-workflow'>Development Workflow</h2><h3 id='directory-structure'>Directory Structure</h3>
<blockquote>
<p>Example of a package structure.</p>
</blockquote>
<pre class="highlight shell tab-shell"><code>packagename
    docs
    examples
    nodeflux
        __init__.py
        packagename
            __init__.py
            yourmodule.py
            othermodule.py
    tests
        __init__.py
        packagename
            __init__.py
            test_yourmodule.py
            test_othermodule.py
    .gitignore
    bitbucket-pipelines.yml
    LICENSE
    Pipfile
    Pipfile.lock
    README.md
    RELEASE.md
    requirements.txt
    setup.py
</code></pre>
<blockquote>
<p>Those structure allow standardized import from <code>nodeflux</code> namespace. For example:</p>
</blockquote>
<pre class="highlight python tab-python"><code><span class="kn">from</span> <span class="nn">nodeflux.logger</span> <span class="kn">import</span> <span class="n">Logger</span>
</code></pre>
<p>A clean, structured project directory is one of the key to the project&#39;s maintainability.</p>

<p>A module or package <strong>must</strong> live inside the <code>nodeflux</code> directory. It allows a standardized <code>import</code> from the <code>nodeflux</code> namespace.</p>
<h4 id='project-properties'>Project Properties</h4>
<table><thead>
<tr>
<th>Location</th>
<th>Purpose</th>
</tr>
</thead><tbody>
<tr>
<td><code>./.gitignore</code></td>
<td>List of file name patterns to be ignored by git.</td>
</tr>
<tr>
<td><code>./bitbucket-pipelines.yml</code></td>
<td>Bitbucket pipeline configuration file.</td>
</tr>
<tr>
<td><code>./LICENSE</code></td>
<td>Full text of the license of this package.</td>
</tr>
<tr>
<td><code>./README.md</code></td>
<td>Overview of the package.</td>
</tr>
<tr>
<td><code>./RELEASE.md</code></td>
<td>Lists every release and it&#39;s changelog on each version.</td>
</tr>
</tbody></table>
<h4 id='dependencies-and-setup-script'>Dependencies and Setup Script</h4>
<table><thead>
<tr>
<th>Location</th>
<th>Purpose</th>
</tr>
</thead><tbody>
<tr>
<td><code>./Pipfile</code></td>
<td>List of project requirements generated by <code>pipenv</code>.</td>
</tr>
<tr>
<td><code>./Pipfile.lock</code></td>
<td>Locked requirements to make a deterministic build.</td>
</tr>
<tr>
<td><code>./requirements.txt</code></td>
<td>List of dependencies. Should be frozen by <code>pipenv</code>.</td>
</tr>
<tr>
<td><code>./setup.py</code></td>
<td>Script to build and install the package.</td>
</tr>
</tbody></table>
<h4 id='modules-and-package'>Modules and Package</h4>
<table><thead>
<tr>
<th>Location</th>
<th>Purpose</th>
</tr>
</thead><tbody>
<tr>
<td><code>./nodeflux/packagename/</code></td>
<td>If there&#39;s more than one module, put all modules in this directory.</td>
</tr>
<tr>
<td><code>./nodeflux/yourmodule.py</code></td>
<td>If there&#39;s only one module, put it directly on <code>./nodeflux</code> directory.</td>
</tr>
</tbody></table>
<h4 id='documentations-and-example'>Documentations and Example</h4>
<table><thead>
<tr>
<th>Location</th>
<th>Purpose</th>
</tr>
</thead><tbody>
<tr>
<td><code>./docs/</code></td>
<td>Package reference documentation.</td>
</tr>
<tr>
<td><code>./examples/</code></td>
<td>Usage example of the package.</td>
</tr>
</tbody></table>
<h4 id='test-suites'>Test Suites</h4>
<table><thead>
<tr>
<th>Location</th>
<th>Purpose</th>
</tr>
</thead><tbody>
<tr>
<td><code>./tests/packagename</code></td>
<td>If there&#39;s more than one module, put the package&#39;s test cases in this directory.</td>
</tr>
<tr>
<td><code>./tests/test_yourmodule.py</code></td>
<td>If there&#39;s only one module, put it&#39;s test cases directly in <code>./tests</code> directory.</td>
</tr>
</tbody></table>
<h3 id='dependency-management'>Dependency Management</h3>
<blockquote>
<p>Inside the Pipfile. All of these are generated automatically by <code>pipenv</code>.</p>
</blockquote>
<pre class="highlight ini tab-ini"><code><span class="nn">[[source]</span><span class="err">]</span>

<span class="py">url</span> <span class="p">=</span> <span class="s">"https://pypi.python.org/simple"</span>
<span class="py">verify_ssl</span> <span class="p">=</span> <span class="s">true</span>
<span class="py">name</span> <span class="p">=</span> <span class="s">"pypi"</span>

<span class="nn">[packages]</span>

<span class="py">fire</span> <span class="p">=</span> <span class="s">"*"</span>
<span class="py">logger</span> <span class="p">=</span> <span class="s">{git = "https://bitbucket.org/verysmartdonkey/nodeflux-logger-python"}</span>

<span class="nn">[dev-packages]</span>

<span class="py">pylint</span> <span class="p">=</span> <span class="s">"*"</span>
<span class="py">pytest</span> <span class="p">=</span> <span class="s">"*"</span>

<span class="nn">[requires]</span>

<span class="py">python_version</span> <span class="p">=</span> <span class="s">"3.6"</span>
</code></pre>
<blockquote>
<p>This way we can install all dependencies with</p>
</blockquote>
<pre class="highlight shell tab-shell"><code><span class="gp">$ </span>pipenv install
</code></pre>
<blockquote>
<p>which read or generate a <code>Pipfile.lock</code> to make sure the installation is deterministic.</p>
</blockquote>

<p>The most common dependency management for python is the use of <code>requirements.txt</code> file, which can be installed with <code>pip install -r requirements.txt</code>. Unfortunately, this simple solution is prone to many problems. Installation with <code>requirements.txt</code> is non deterministic. Depending on the content of the <code>requirements.txt</code>, an installation cannot be guaranteed to have the same version with the previous, tested installation. Furthermore, most of the time we need to manually add the dependencies to the <code>requirements.txt</code> file.</p>

<p>Installing packages into global <code>site-packages</code> is not a good practice. Some common problem we face is version clashing and permission (requires <code>sudo</code> to install a package). The best practice is to use virtual environment for each project. It allows a project to isolate itself from other projects and use different version of dependency.</p>

<p><a href="http://pipenv.readthedocs.io/en/latest/"><strong>Pipenv</strong></a> is a packaging tool that aims to solve those problems. It automatically creates and manages a virtual environment for your project, as well as adds or removes packages to a <code>Pipefile</code> as you install or uninstall packages. It has a <code>Pipfile.lock</code>, which is used to produce deterministic installation. It also able to separate development packages from the production packages.</p>

<p>First, install <code>pipenv</code> with <code>pip install pipenv</code>.</p>

<p>Here&#39;s a cheat sheet of the <code>pipenv</code> as a dependency manager:</p>

<ul>
<li>Specify Python version for the virtual environment: <code>pipenv --python 3.6</code>. If not specified, it will use the version of the default Python.</li>
<li>Install a package: <code>pipenv install &lt;packagename&gt;</code>.</li>
<li>Install a development package: <code>pipenv install --dev &lt;devpackagename&gt;</code></li>
<li>Install from a git repository <code>pipenv install git+https://bitbucket.org/verysmartdonkey/nodeflux-logger-python#egg=logger</code></li>
<li>Install production dependencies from the <code>Pipfile</code>: <code>pipenv install</code></li>
<li>To install dependencies from the <code>Pipfile</code> along with the development packages: <code>pipenv install --dev</code></li>
<li>Run a command from the virtual environment: <code>pipenv run &lt;command&gt;</code></li>
<li>Spawn a shell with the virtual environment activated: <code>pipenv shell</code></li>
<li>Generate a <code>requirements.txt</code> from the <code>Pipfile.lock</code>: <code>pipenv lock -r</code></li>
</ul>

<p>You <strong>must</strong> use <code>pipenv</code> to manage your dependencies and virtual environment, and you <strong>must</strong> separate production and development packages.</p>
<h3 id='setup-script'>Setup Script</h3>
<blockquote>
<p>Setup script example.</p>
</blockquote>
<pre class="highlight python tab-python"><code><span class="kn">from</span> <span class="nn">setuptools</span> <span class="kn">import</span> <span class="n">setup</span>

<span class="n">setup</span><span class="p">(</span>
  <span class="n">name</span><span class="o">=</span><span class="s">'nflogger'</span><span class="p">,</span>
  <span class="n">version</span><span class="o">=</span><span class="s">'0.1.1'</span><span class="p">,</span>
  <span class="n">description</span><span class="o">=</span><span class="s">'Nodeflux Standard Logger'</span><span class="p">,</span>
  <span class="n">url</span><span class="o">=</span><span class="s">'https://bitbucket.org/verysmartdonkey/nodeflux-logger-python'</span><span class="p">,</span>
  <span class="n">author</span><span class="o">=</span><span class="s">'Ilham Imaduddin'</span><span class="p">,</span>
  <span class="n">author_email</span><span class="o">=</span><span class="s">'ilham@nodeflux.io'</span><span class="p">,</span>
  <span class="n">packages</span><span class="o">=</span><span class="p">[</span><span class="s">'nflogger'</span><span class="p">],</span>
  <span class="n">zip_safe</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</code></pre>
<blockquote>
<p>With this build script, we can easily install the library with <code>pip</code>.</p>
</blockquote>
<pre class="highlight shell tab-shell"><code><span class="c"># From local repository</span>
pip install .

<span class="c"># From remote repository</span>
pip install -e git+https://bitbucket.org/verysmartdonkey/nodeflux-logger-python#egg<span class="o">=</span>nflogger
</code></pre>
<p>When we create a package, we&#39;re not only responsible to make the package works, but we also responsible to make the installation process as easy as possible.</p>

<p>The most common way to install python package is <code>pip</code>. To make <code>pip</code> works, we need to make the setup script in the <code>setup.py</code> file. See the details in Python documentation <a href="https://docs.python.org/3.6/distutils/setupscript.html">Writing the Setup Script</a>.</p>

<p>After the setup script is ready, we can install the package with <code>pip install .</code> (or <code>pip install -e .</code> to make it editable while developing the package).</p>

<p>You <strong>must</strong> to create a setup script for every package that designed to be reusable. An installation with <code>pip install</code> <strong>should</strong> installs all package components, including dependencies, extensions and package data.</p>
<h3 id='lint'>Lint</h3>
<blockquote>
<p>Run pylint againts your code.</p>
</blockquote>
<pre class="highlight shell tab-shell"><code>pylint ./tests
</code></pre>
<p><a href="https://pylint.readthedocs.io/en/latest/">Pylint</a> is a tool for finding bugs and style problems in Python source code. It finds problems that are typically caught by a compiler for less dynamic languages like C and C++. Because of the dynamic nature of Python, some warnings may be incorrect; however, spurious warnings should be fairly infrequent.</p>

<p>You <strong>must</strong> use <code>pylint</code> to analize your code.</p>

<p>To make the most of pylint, use an extension that supports pylint on your text editor/IDE:</p>

<ul>
<li>Visual Studio Code: <a href="https://marketplace.visualstudio.com/items?itemName=ms-python.python">Python Extension</a></li>
<li>Sublime Text: <a href="https://packagecontrol.io/packages/Anaconda">Anaconda</a></li>
</ul>
<h4 id='pros'>Pros</h4>
<p>Catches easy-to-miss errors like typos, using-vars-before-assignment, etc.</p>
<h4 id='cons'>Cons</h4>
<p>pylint isn&#39;t perfect. To take advantage of it, we&#39;ll need to sometimes: a) Write around it b) Suppress its warnings or c) Improve it.</p>
<h3 id='formatting'>Formatting</h3><h3 id='compatibility'>Compatibility</h3>
<blockquote>
<p>An example of <code>__future__</code> import to improve Python 2 and 3 compatibility.</p>
</blockquote>
<pre class="highlight python tab-python"><code><span class="kn">from</span> <span class="nn">__future__</span> <span class="kn">import</span> <span class="n">print_function</span>

<span class="k">print</span><span class="p">(</span><span class="s">'Hello, World'</span><span class="p">)</span>
</code></pre>
<blockquote>
<p>This works on both Python 2 and 3.</p>
</blockquote>
<h3 id='automated-test'>Automated Test</h3><h3 id='wrapping-it-up'>Wrapping it Up</h3><h2 id='style-rules'>Style Rules</h2>